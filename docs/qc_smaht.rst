========================
Quality metrics in SMaHT
========================

The handling of Quality Metrics in the SMaHT portal is different from the one in 4DN and CGAP (CGAP supports this way as well). It is more generic in general and uses only a single quality metrics item type in the portal, i.e., ``QualityMetricGeneric``. The new approach removes much of the complexity in Tibanna that was required to handle the different QC types and moves this complexity to the pipeline side.

The QC functionality in Tibanna_ff is activated, when it encounters workflow arguments of type ``Generic QC file``. These files are generated by the bioinformatics pipeline and further processed by Tibanna. They are attached to an input file, i.e., the ``argument_to_be_attached_to`` property is set. There are two types of generic QC files:
 
*QC JSON files*

The ``qc_json`` property is set to ``true`` in the workflow argument. The file is in JSON format that contains the metrics that are supposed to be patched to the portal as part of the ``QualityMetricGeneric`` item. A minimal example of this file is shown below

::

  {
    "name": "BAM Quality Metrics", # Required
    "qc_values": [
      {
        "key": "Total Sequences [Samtools]",         # Required
        "tooltip": "Text that describes the metric", # Optional
        "value": "537993296"                         # Required
      },
      {
        "key": "Reads QC-Failed [Samtools]",
        "tooltip": "Number of reads that failed the quality checks",
        "value": "0"
      },
      ...
    ]
  }


*Other results files*

The ``qc_zipped`` property is set to ``true`` in the workflow argument. These files contain compressed results files from the various tools that ran during the QC workflow. Tibanna sets the `url` property of the ``QualityMetricGeneric`` to the location of this file, so that users have easy access to the raw results of the QC tools.

Validation of QC metrics
------------------------

The ``QualityMetricGeneric`` item has the property ``overall_quality_status`` that it inherits from ``QualityMetric``. By default this property is set to ``PASS``. Furthermore, the indivudal QC metrics, i.e., the ``qc_values`` within the ``QualityMetricGeneric`` item that is created by Tibanna based on the QC JSON file decribed above, each have a QC flag that can be ``PASS``, ``WARN`` or ``FAIL``. By default, these flags are set to ``PASS`` as well.

Tibanna has the functionality to determine the correct QC flags of individual metrics and the overall QC workflow. In order to activate this functionality the appropirate thresholds and rules that are to be used have to be present in the workflow. If a QC JSON file is present in the workflow, Tibanna is also looking for the presence of a workflow argument of type ``QC ruleset``. This is a string that encodes a JSON object of the following form

::

  [
      {
      "qc_thresholds": [
          {
              "id": "ts1",
              "metric": "Total Sequences [Samtools]",
              "operator": ">=",
              "pass_target": 500000000,
              "warn_target": 450000000,
              "use_as_qc_flag": True
          },
          {
              "id": "ts2",
              "metric": "Total Sequences [Samtools]",
              "operator": "<=",
              "pass_target": 1000000000,
              "warn_target": 1000000000,
          },
          {
              "id": "qcf",
              "metric": "Reads QC-Failed [Samtools]",
              "operator": "<",
              "pass_target": 10,
              "warn_target": 20,
              "use_as_qc_flag": True
          },
          ...
      ],
      "overall_quality_status_rule": "{ts1} and {ts2} and {qcf}",
      "applies_to": ["input_bam"]
    },
    ...
  ]

The items in ``qc_thresholds`` define the thresholds for the individual QC metrics. Each of the metrics used here, need to be present in the QC JSON. The ``metric`` property needs to be exactly the same as the ``key`` property in the QC JSON. Operators that are currently supported are ``<=``, ``<``, ``>=``, ``>``, ``==`` and ``!=``. ``pass_target`` determines the threshold to obatin a ``PASS`` flag, ``warn_target`` determines the threshold to obatin a ``WARN`` flag for that metrics. Currently, ``pass_target`` and ``warn_target`` can be of type ``float``, ``int`` or ``str``. For ``str`` values only the operators  ``==`` and ``!=`` should be used. The property ``use_as_qc_flag`` indicates that this threshold is to be used as QC flag for this metrics in the ``QualityMetricGeneric`` item.

The overall status flag for the QC workflow is determined by the logical expression in ``overall_quality_status_rule``. The values in the braces refer to the IDs of the individual QC thresholds. The logical expression supports the operators ``and``, ``or`` and ``not`` as well as round brackets for grouping (e.g., ``{qc1} and ({qc2} or {qc3}) and not {qc4}``). Thus, complex QC requirements can be handled by Tibanna. The overall status will obtain a ``PASS`` flag, if all metrics that are referenced in ``overall_quality_status_rule`` have a ``PASS`` flag and the expression in ``overall_quality_status_rule`` evaluates to ``True``. The overall status will obtain a ``WARN`` flag, if all metrics that are referenced in ``overall_quality_status_rule`` have a ``PASS`` or ``WARN`` flag and the expression in ``overall_quality_status_rule`` evaluates to ``True``. The overall status will obtain a ``FAIL`` flag, if the ``overall_quality_status_rule`` evaluates to ``False``.
